// <auto-generated />
namespace PolygonStocks.Migrations

open System
open Microsoft.EntityFrameworkCore
open Microsoft.EntityFrameworkCore.Infrastructure
open Microsoft.EntityFrameworkCore.Metadata
open Microsoft.EntityFrameworkCore.Migrations
open Microsoft.EntityFrameworkCore.Storage.ValueConversion

[<DbContext(typeof<Model.PolygonContext>)>]
[<Migration("20220601194100_RemoveExchanges")>]
type RemoveExchanges() =
    inherit Migration()

    override this.Up(migrationBuilder:MigrationBuilder) =
        migrationBuilder.DropTable(
            name = "Exchanges"
            ) |> ignore

        migrationBuilder.AlterColumn<decimal>(
            name = "PriceWeightedByVolume"
            ,table = "AggregatedBars"
            ,``type`` = "TEXT"
            ,nullable = true
            ,oldClrType = typedefof<decimal>
            ,oldType = "TEXT"
            ,oldNullable = false
            ) |> ignore

        migrationBuilder.AlterColumn<int>(
            name = "NumberOfTransactions"
            ,table = "AggregatedBars"
            ,``type`` = "INTEGER"
            ,nullable = true
            ,oldClrType = typedefof<int>
            ,oldType = "INTEGER"
            ,oldNullable = false
            ) |> ignore


    override this.Down(migrationBuilder:MigrationBuilder) =
        migrationBuilder.AlterColumn<decimal>(
            name = "PriceWeightedByVolume"
            ,table = "AggregatedBars"
            ,``type`` = "TEXT"
            ,nullable = false
            ,defaultValue = "0.000000m"
            ,oldClrType = typedefof<decimal>
            ,oldType = "TEXT"
            ,oldNullable = true
            ) |> ignore

        migrationBuilder.AlterColumn<int>(
            name = "NumberOfTransactions"
            ,table = "AggregatedBars"
            ,``type`` = "INTEGER"
            ,nullable = false
            ,defaultValue = "0"
            ,oldClrType = typedefof<int>
            ,oldType = "INTEGER"
            ,oldNullable = true
            ) |> ignore

        migrationBuilder.CreateTable(
            name = "Exchanges"
            ,columns = (fun table -> 
            {|
                Name =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                Market =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                Mic =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                PolygonCode =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
                Tape =
                    table.Column<string>(
                        nullable = false
                        ,``type`` = "TEXT"
                    )
            |})
            , constraints =
                (fun table -> 
                    table.PrimaryKey("PK_Exchanges", (fun x -> (x.Name) :> obj)
                    ) |> ignore
                )
        ) |> ignore


    override this.BuildTargetModel(modelBuilder: ModelBuilder) =
        modelBuilder.HasAnnotation("ProductVersion", "6.0.5") |> ignore

        modelBuilder.Entity("Model+AggregatedBar", (fun b ->

            b.Property<string>("Ticker")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<Int64>("TimestampSecs")
                .IsRequired(true)
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<decimal>("Close")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<decimal>("Highest")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<decimal>("Lowest")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<int option>("NumberOfTransactions")
                .IsRequired(false)
                .HasColumnType("INTEGER")
                |> ignore

            b.Property<decimal>("Open")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<decimal option>("PriceWeightedByVolume")
                .IsRequired(false)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<int>("Volume")
                .IsRequired(true)
                .HasColumnType("INTEGER")
                |> ignore

            b.HasKey("Ticker", "TimestampSecs")
                |> ignore


            b.ToTable("AggregatedBars") |> ignore

        )) |> ignore

        modelBuilder.Entity("Model+InactiveTicker", (fun b ->

            b.Property<string>("Ticker")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Ticker")
                |> ignore


            b.ToTable("InactiveTickers") |> ignore

        )) |> ignore

        modelBuilder.Entity("Model+QueuedTicker", (fun b ->

            b.Property<string>("Ticker")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Ticker")
                |> ignore


            b.ToTable("QueuedTickers") |> ignore

        )) |> ignore

        modelBuilder.Entity("Model+Ticker", (fun b ->

            b.Property<string>("Ticker")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<string>("Currency")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<string>("Locale")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<string>("Name")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.Property<string>("PrimaryExchange")
                .IsRequired(true)
                .HasColumnType("TEXT")
                |> ignore

            b.HasKey("Ticker")
                |> ignore


            b.ToTable("Tickers") |> ignore

        )) |> ignore

